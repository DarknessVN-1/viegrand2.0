import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  ScrollView,
  Animated,
  Dimensions
} from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { colors } from '../theme/colors';
import { normalize } from '../utils/responsive';

const { width } = Dimensions.get('window');

const VoiceAssistantTips = ({ onClose, visible = false }) => {
  const [showTips, setShowTips] = useState(visible);
  const slideAnim = React.useRef(new Animated.Value(width)).current;
  
  useEffect(() => {
    if (visible) {
      setShowTips(true);
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }).start();
    } else {
      Animated.timing(slideAnim, {
        toValue: width,
        duration: 300,
        useNativeDriver: true,
      }).start(() => setShowTips(false));
    }
  }, [visible]);
  
  if (!showTips) return null;
  
  const voiceCommands = [
    {
      category: 'üß≠ ƒêi·ªÅu H∆∞·ªõng',
      commands: [
        { phrase: 'Trang ch·ªß', description: 'Quay v·ªÅ m√†n h√¨nh ch√≠nh' },
        { phrase: 'M·ªü video', description: 'M·ªü danh s√°ch video' },
        { phrase: 'M·ªü truy·ªán', description: 'M·ªü danh s√°ch truy·ªán' },
        { phrase: 'Quay l·∫°i', description: 'Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc' },
        { phrase: 'M·ªü game', description: 'M·ªü danh s√°ch game' },
        { phrase: 'C√†i ƒë·∫∑t', description: 'M·ªü m√†n h√¨nh c√†i ƒë·∫∑t' },
      ]
    },
    {
      category: 'üé¨ Xem Video',
      commands: [
        { phrase: 'T√¨m video v·ªÅ...[ch·ªß ƒë·ªÅ]', description: 'T√¨m video theo ch·ªß ƒë·ªÅ' },
        { phrase: 'Ph√°t / T·∫°m d·ª´ng', description: 'ƒêi·ªÅu khi·ªÉn ph√°t video' },
        { phrase: 'To l√™n / Nh·ªè xu·ªëng', description: 'ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng' },
        { phrase: 'T·∫Øt ti·∫øng / B·∫≠t ti·∫øng', description: 'B·∫≠t/t·∫Øt √¢m thanh' },
      ]
    },
    {
      category: 'üìö ƒê·ªçc Truy·ªán',
      commands: [
        { phrase: 'Ch∆∞∆°ng ti·∫øp / Ch∆∞∆°ng tr∆∞·ªõc', description: 'Di chuy·ªÉn gi·ªØa c√°c ch∆∞∆°ng' },
        { phrase: 'TƒÉng c·ª° ch·ªØ / Gi·∫£m c·ª° ch·ªØ', description: 'ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ch·ªØ' },
        { phrase: 'Ch·∫ø ƒë·ªô t·ªëi / Ch·∫ø ƒë·ªô s√°ng', description: 'Thay ƒë·ªïi m√†u n·ªÅn' },
      ]
    },
    {
      category: 'üéÆ Ch∆°i Game',
      commands: [
        { phrase: 'Ch∆°i sudoku', description: 'M·ªü game Sudoku' },
        { phrase: 'Ch∆°i x·∫øp s·ªë', description: 'M·ªü game X·∫øp s·ªë' },
        { phrase: 'Tr√≤ ch∆°i tr√≠ nh·ªõ', description: 'M·ªü game tr√≠ nh·ªõ' },
      ]
    },
    {
      category: 'üíä Thu·ªëc',
      commands: [
        { phrase: 'M·ªü thu·ªëc men', description: 'Xem l·ªãch u·ªëng thu·ªëc' },
        { phrase: 'L·ªãch u·ªëng thu·ªëc', description: 'Xem l·ªãch u·ªëng thu·ªëc' },
      ]
    },
    {
      category: 'üì∑ Camera',
      commands: [
        { phrase: 'M·ªü camera', description: 'Xem camera gi√°m s√°t' },
        { phrase: 'Th√™m camera', description: 'Th√™m camera m·ªõi' },
      ]
    }
  ];
  
  return (
    <View style={styles.overlay}>
      <Animated.View 
        style={[
          styles.container,
          { transform: [{ translateX: slideAnim }] }
        ]}
      >
        <View style={styles.header}>
          <Text style={styles.title}>C√°c L·ªánh Gi·ªçng N√≥i</Text>
          <TouchableOpacity onPress={onClose} style={styles.closeButton}>
            <MaterialCommunityIcons name="close" size={24} color="#fff" />
          </TouchableOpacity>
        </View>
        
        <ScrollView style={styles.content}>
          <Text style={styles.description}>
            B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh gi·ªçng n√≥i sau ƒë·ªÉ ƒëi·ªÅu khi·ªÉn ·ª©ng d·ª•ng:
          </Text>
          
          {voiceCommands.map((category, index) => (
            <View key={index} style={styles.categoryContainer}>
              <Text style={styles.categoryTitle}>{category.category}</Text>
              
              {category.commands.map((command, cmdIndex) => (
                <View key={cmdIndex} style={styles.commandItem}>
                  <MaterialCommunityIcons 
                    name="microphone" 
                    size={16} 
                    color={colors.primary}
                    style={styles.commandIcon} 
                  />
                  <View style={styles.commandTextContainer}>
                    <Text style={styles.commandPhrase}>"{command.phrase}"</Text>
                    <Text style={styles.commandDescription}>{command.description}</Text>
                  </View>
                </View>
              ))}
            </View>
          ))}
          
          <View style={styles.tipContainer}>
            <MaterialCommunityIcons name="lightbulb-on" size={20} color="#F9A825" />
            <Text style={styles.tipText}>
              M·∫πo: Nh·∫•n n√∫t microphone v√† n√≥i r√µ r√†ng ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t.
            </Text>
          </View>
        </ScrollView>
      </Animated.View>
    </View>
  );
};

const styles = StyleSheet.create({
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 9999,
  },
  container: {
    position: 'absolute',
    top: 0,
    right: 0,
    width: '80%',
    height: '100%',
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: -2, height: 0 },
    shadowOpacity: 0.25,
    shadowRadius: 5,
    elevation: 5,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: colors.primary,
  },
  title: {
    fontSize: normalize(18),
    fontWeight: 'bold',
    color: '#fff',
  },
  closeButton: {
    padding: 5,
  },
  content: {
    flex: 1,
    padding: 16,
  },
  description: {
    fontSize: normalize(14),
    color: colors.textSecondary,
    marginBottom: 20,
    lineHeight: normalize(20),
  },
  categoryContainer: {
    marginBottom: 20,
  },
  categoryTitle: {
    fontSize: normalize(16),
    fontWeight: 'bold',
    color: colors.primary,
    marginBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: colors.primaryLight + '40',
    paddingBottom: 5,
  },
  commandItem: {
    flexDirection: 'row',
    marginBottom: 12,
    paddingLeft: 5,
  },
  commandIcon: {
    marginTop: 2,
    marginRight: 8,
  },
  commandTextContainer: {
    flex: 1,
  },
  commandPhrase: {
    fontSize: normalize(15),
    color: colors.textPrimary,
    fontWeight: '500',
    marginBottom: 2,
  },
  commandDescription: {
    fontSize: normalize(13),
    color: colors.textSecondary,
  },
  tipContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFF8E1',
    padding: 12,
    borderRadius: 8,
    marginTop: 10,
    marginBottom: 20,
    alignItems: 'center',
  },
  tipText: {
    fontSize: normalize(13),
    color: colors.textPrimary,
    marginLeft: 8,
    flex: 1,
  },
});

export default VoiceAssistantTips;
