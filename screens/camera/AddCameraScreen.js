import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  ScrollView,
  StatusBar,
  Alert,
  Platform,
  Animated,
  ActivityIndicator
} from 'react-native';
import { MaterialIcons, MaterialCommunityIcons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { colors } from '../../theme/colors';
import { styles } from './AddCameraScreenStyles';
import { useAuth } from '../../context/AuthContext';

// Function to remove accents and spaces
const removeAccentsAndSpaces = (str) => {
  return str
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/\s+/g, '_')
    .toLowerCase();
};

// Add an API endpoint to save a new camera
const saveCamera = async (cameraData) => {
  try {
    console.log('========================');
    console.log('B∆Ø·ªöC 1: B·∫ÆT ƒê·∫¶U L∆ØU CAMERA');
    console.log('üìÑ Camera data to save:', cameraData);
    
    const apiUrl = 'https://viegrand.site/api/add_camera.php';
    console.log('üîó API URL:', apiUrl);
    
    console.log('B∆Ø·ªöC 2: G·ª¨I REQUEST ƒê·∫æN SERVER');
    const requestBody = JSON.stringify(cameraData);
    console.log('üì¶ Request body:', requestBody);
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: requestBody
    });
    
    console.log('üì° API Status code:', response.status);
    const responseText = await response.text();
    console.log('üì¶ Raw response text:', responseText);
    
    // Parse JSON after logging the raw text
    let result;
    try {
      result = JSON.parse(responseText);
      console.log('B∆Ø·ªöC 3: NH·∫¨N K·∫æT QU·∫¢ T·ª™ SERVER');
      console.log('üìä Parsed result:', result);
    } catch (parseError) {
      console.log('‚ùå JSON parse error:', parseError);
      throw new Error('Invalid JSON response');
    }
    
    console.log('B∆Ø·ªöC 4: K·∫æT TH√öC L∆ØU CAMERA');
    return result;
  } catch (error) {
    console.log('‚ùå‚ùå‚ùå ERROR saving camera:', error.message);
    console.error(error);
    throw error;
  }
};

const AddCameraScreen = ({ navigation, route }) => {
  const { user } = useAuth();
  const [cameraName, setCameraName] = useState('');
  const [name_room, setNameRoom] = useState(''); // This will be the ID and display name
  const [camera_url, setCameraUrl] = useState('');
  const [cameraLocation, setCameraLocation] = useState('');
  const [cameraType, setCameraType] = useState('');
  const [loading, setLoading] = useState(false);
  
  // Animation values
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const translateY = useRef(new Animated.Value(20)).current;

  // Animate components when they mount
  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }),
      Animated.timing(translateY, {
        toValue: 0,
        duration: 600,
        useNativeDriver: true,
      }),
    ]).start();
  }, []);

  // Update name_room whenever cameraName changes
  const handleCameraNameChange = (text) => {
    setCameraName(text);
    const formattedName = removeAccentsAndSpaces(text);
    setNameRoom(formattedName);
  };

  const handleAddCamera = async () => {
    // Validate inputs
    if (!cameraName.trim()) {
      console.log('‚ùå Validation error: Missing camera name');
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p t√™n camera');
      return;
    }

    if (!cameraLocation.trim()) {
      console.log('‚ùå Validation error: Missing camera location');
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p v·ªã tr√≠ camera');
      return;
    }

    if (cameraLocation.length > 20) {
      console.log('‚ùå Validation error: Camera location too long');
      Alert.alert('L·ªói', 'V·ªã tr√≠ camera kh√¥ng ƒë∆∞·ª£c qu√° 20 k√≠ t·ª±');
      return;
    }

    if (!cameraType) {
      console.log('‚ùå Validation error: Missing camera type');
      Alert.alert('L·ªói', 'Vui l√≤ng ch·ªçn lo·∫°i camera');
      return;
    }

    // Show loading
    console.log('B∆Ø·ªöC 1: B·∫ÆT ƒê·∫¶U TH√äM CAMERA');
    setLoading(true);

    // Ki·ªÉm tra user_id
    if (!user || !user.user_id) {
      console.log('‚ùå No user ID available');
      Alert.alert('L·ªói', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
      setLoading(false);
      return;
    }

    console.log('üë§ User ID for new camera:', user.user_id);
    console.log('üë§ Full user object:', user);
    
    // X·ª≠ l√Ω URL camera - t·∫°o URL theo ƒë·ªãnh d·∫°ng c·ªßa server
    let finalCameraUrl = `https://servers.works/video.${name_room}.${user.user_id}/video`;
    
    // N·∫øu ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p URL, ∆∞u ti√™n URL c·ªßa h·ªç
    if (camera_url && camera_url.trim()) {
      finalCameraUrl = camera_url.trim();
      if (!finalCameraUrl.startsWith('http') && !finalCameraUrl.startsWith('rtsp')) {
        finalCameraUrl = `https://servers.works/video.${camera_url}.${user.user_id}/video`;
      }
    }
    
    console.log('üì° Final camera URL:', finalCameraUrl);
    
    // Create camera object
    const newCamera = {
      user_id: user.user_id,
      camera_url: finalCameraUrl,
      name_room: name_room,
    };
    
    console.log('üì∑ New camera data:', newCamera);
    
    try {
      // Save to API first
      console.log('B∆Ø·ªöC 2: G·ª¨I CAMERA L√äN API');
      const apiResponse = await saveCamera(newCamera);
      
      if (apiResponse.status === 'success') {
        console.log('‚úÖ Camera saved successfully:', apiResponse.data);
        
        // If API save was successful, add the camera with the ID from API
        const savedCamera = {
          id: apiResponse.data.id || Date.now().toString(),
          name: cameraName, // Save original name for display
          name_room: name_room, // Use formatted name as ID
          url: camera_url,
          status: 'online',
          text: 'ƒêang ho·∫°t ƒë·ªông'
        };
        
        console.log('B∆Ø·ªöC 3: ƒêI·ªÄU H∆Ø·ªöNG TR·ªû L·∫†I V·ªöI CAMERA M·ªöI');
        console.log('üì∑ Saved camera object:', savedCamera);
        
        // Navigate back with the new camera data
        navigation.navigate('RelativeTabs', { 
          screen: 'Camera',
          params: { newCamera: savedCamera }
        });
        
        Alert.alert(
          'Th√†nh c√¥ng',
          'ƒê√£ th√™m camera m·ªõi th√†nh c√¥ng',
        );
      } else {
        console.log('‚ùå API error:', apiResponse);
        // Handle API error
        Alert.alert('L·ªói', apiResponse.message || 'Kh√¥ng th·ªÉ th√™m camera. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } catch (error) {
      console.log('‚ùå‚ùå‚ùå ERROR adding camera:', error);
      Alert.alert('L·ªói', 'C√≥ l·ªói x·∫£y ra khi th√™m camera. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } finally {
      console.log('B∆Ø·ªöC CU·ªêI: K·∫æT TH√öC QU√Å TR√åNH TH√äM CAMERA');
      console.log('========================');
      setLoading(false);
    }
  };

  const selectCameraType = () => {
    Alert.alert(
      'Ch·ªçn lo·∫°i camera',
      'Vui l√≤ng ch·ªçn lo·∫°i camera c·ªßa b·∫°n',
      [
        { text: 'Camera IP', onPress: () => setCameraType('IP Camera') },
        { text: 'Camera RTSP', onPress: () => setCameraType('RTSP Camera') },
        { text: 'Camera USB', onPress: () => setCameraType('USB Camera') },
        { text: 'H·ªßy', style: 'cancel' }
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Status bar */}
      <StatusBar barStyle="light-content" backgroundColor={colors.primaryDark} />
      
      {/* Header */}
      <LinearGradient
        style={styles.headerView}
        colors={[colors.primaryDark, colors.primary]}
      >
        <View style={styles.headerContent}>
          <TouchableOpacity 
            onPress={() => navigation.goBack()} 
            style={styles.backButton}
          >
            <MaterialIcons name="arrow-back" size={24} color="#fff" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Th√™m Camera M·ªõi</Text>
          <View style={styles.rightPlaceholder} />
        </View>
      </LinearGradient>

      <ScrollView 
        style={styles.content}
        showsVerticalScrollIndicator={false}
      >
        <Animated.View 
          style={[
            styles.formContainer,
            { opacity: fadeAnim, transform: [{ translateY: translateY }] }
          ]}
        >
          {/* Info Box */}
          <View style={styles.formInfoBox}>
            <Text style={styles.formInfoText}>
              Camera s·∫Ω gi√∫p b·∫°n theo d√µi ng∆∞·ªùi th√¢n t·ª´ xa. Nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ thi·∫øt l·∫≠p camera m·ªõi.
            </Text>
          </View>

          {/* Camera Information Section */}
          <View style={styles.sectionHeader}>
            <MaterialCommunityIcons name="cctv" size={20} color={colors.primary} style={styles.sectionIcon} />
            <Text style={styles.sectionTitle}>Th√¥ng tin camera</Text>
          </View>
          
          <View style={styles.formGroup}>
            <Text style={styles.formLabel}>T√™n Camera</Text>
            <TextInput
              style={styles.formInput}
              placeholder="Nh·∫≠p t√™n camera (VD: Camera ph√≤ng kh√°ch)"
              value={cameraName}
              onChangeText={handleCameraNameChange}
            />
            {cameraName ? (
              <Text style={styles.formHelper}>
                ID: {name_room}
              </Text>
            ) : null}
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.formLabel}>Lo·∫°i Camera</Text>
            <TouchableOpacity 
              style={styles.formSelect}
              onPress={selectCameraType}
            >
              <Text style={[
                styles.formSelectText, 
                !cameraType && styles.formSelectPlaceholder
              ]}>
                {cameraType || "Ch·ªçn lo·∫°i camera"}
              </Text>
              <MaterialIcons name="arrow-drop-down" size={24} color={colors.textSecondary} />
            </TouchableOpacity>
          </View>

          <View style={styles.formDivider} />
          
          {/* Location Section */}
          <View style={styles.sectionHeader}>
            <MaterialIcons name="location-on" size={20} color={colors.primary} style={styles.sectionIcon} />
            <Text style={styles.sectionTitle}>V·ªã tr√≠ l·∫Øp ƒë·∫∑t</Text>
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.formLabel}>V·ªã tr√≠ Camera (t·ªëi ƒëa 20 k√Ω t·ª±)</Text>
            <TextInput
              style={styles.formInput}
              placeholder="Nh·∫≠p v·ªã tr√≠ camera (VD: G√≥c ph√≤ng kh√°ch)"
              value={cameraLocation}
              onChangeText={setCameraLocation}
              maxLength={20}
            />
            {cameraLocation ? (
              <Text style={styles.formHelper}>
                {cameraLocation.length}/20 k√Ω t·ª±
              </Text>
            ) : null}
          </View>

          <View style={styles.formDivider} />
          
          {/* Stream Settings Section */}
          <View style={styles.sectionHeader}>
            <MaterialIcons name="settings" size={20} color={colors.primary} style={styles.sectionIcon} />
            <Text style={styles.sectionTitle}>C·∫•u h√¨nh stream</Text>
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.formLabel}>URL Stream (t√πy ch·ªçn)</Text>
            <TextInput
              style={styles.formInput}
              placeholder="Nh·∫≠p URL stream (rtsp://, http://)"
              value={camera_url}
              onChangeText={setCameraUrl}
              autoCapitalize="none"
            />
          </View>

          <View style={styles.formActions}>
            <TouchableOpacity
              style={[styles.formButton, styles.formButtonSecondary]}
              onPress={() => navigation.goBack()}
            >
              <Text style={styles.formButtonSecondaryText}>H·ªßy</Text>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={[styles.formButton, styles.formButtonPrimary]}
              onPress={handleAddCamera}
              disabled={loading}
            >
              {loading ? (
                <ActivityIndicator color="#fff" size="small" style={{marginRight: 8}} />
              ) : (
                <MaterialIcons name="add" size={24} color="#fff" style={styles.formButtonIcon} />
              )}
              <Text style={styles.formButtonPrimaryText}>
                {loading ? 'ƒêang x·ª≠ l√Ω...' : 'Th√™m Camera'}
              </Text>
            </TouchableOpacity>
          </View>
        </Animated.View>
      </ScrollView>
    </SafeAreaView>
  );
};

export default AddCameraScreen;
